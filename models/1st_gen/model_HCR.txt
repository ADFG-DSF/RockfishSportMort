
model{
 tau_comp <- 1 / sd_comp / sd_comp
 sd_comp ~ dunif(0, 10)
 lambda_bc ~ dgamma(0.001, 0.001)
 
 for(n in 1:N){ #composition likelihoods; comp_ denoted by x_ayu in rmarkdown...
  comp_pelagic[n] ~ dbin(p_pelagic[comp_area[n], comp_year[n], comp_user[n] + 1], comp_N[n])
  comp_black[n] ~ dbin(p_black[comp_area[n], comp_year[n] , comp_user[n] + 1], comp_pelagic[n])
  comp_yellow[n] ~ dbin(p_yellow[comp_area[n], comp_year[n], comp_user[n] + 1], comp_N[n] - comp_pelagic[n])
    }
 
 for(r in 1:3){ #priors for mean composition
  mu_beta0_pelagic[r] ~ dnorm(0, 0.001)
  tau_beta0_pelagic[r] ~ dgamma(0.001, 0.001)
  mu_beta0_yellow[r] ~ dnorm(0, 0.001)
  tau_beta0_yellow[r] ~ dgamma(0.001, 0.001)
  mu_beta0_black[r] ~ dnorm(0, 0.001)
  tau_beta0_black[r] ~ dgamma(0.001, 0.001)
  }

 for (a in 1:A){
  # SWHS H & C bias: for simplicity, assuming same bias in C and H estimates? 
  mu_bc[a] ~ dnorm(0, 0.001)              # mean log bias in SWHS H estimates, centered strongly on 0 assumes no bias
  tau_bc[a] <- 1 / sd_bc[a] / sd_bc[a]    # transformed sigma in mean log bias 
  # sigma mean log bias; other options dgamma(shape = 2, rate = 2) and dlnorm(meanlog = 0, sdlog = 0.25)
  sd_bc[a] ~ dgamma(shape = 2, rate = 2) #dunif(0, 10)                 

  #User proportions. 
  b1_pG_H[a] ~ dunif(1, 50)                 # beta1 for user proportion (Puser)
  b2_pG_H[a] ~ dunif(1, 50)                 # beta2 for user proportion (Puser)

  b1_pG_C[a] ~ dunif(1, 50)                 # beta1 for user proportion (Puser)
  b2_pG_C[a] ~ dunif(1, 50)                 # beta2 for user proportion (Puser)

  #proportion of catch that is harvested
  pH_int[a] ~ dnorm(0, 0.001)             # proportion of catch harvested intercept
  pH_slo[a] ~ dnorm(0, 0.001)             # proportion of catch harvested slope

  # logit parameters for proportion estimates defined by mean, temp slope and private angler effect. 
  beta0_pelagic[a] ~ dnorm(mu_beta0_pelagic[regions[a]], tau_beta0_pelagic[regions[a]])
  beta1_pelagic[a] ~ dnorm(0, 0.001)
  beta2_pelagic[a] ~ dnorm(0, 0.001)
  beta0_yellow[a] ~ dnorm(mu_beta0_yellow[regions[a]], tau_beta0_yellow[regions[a]])
  beta1_yellow[a] ~ dnorm(0, 0.001)
  beta2_yellow[a] ~ dnorm(0, 0.001)
  beta3_yellow[a] ~ dnorm(0, 0.001) #allowing more curvature to p_yellow
  beta0_black[a] ~ dnorm(mu_beta0_black[regions[a]], tau_beta0_pelagic[regions[a]])
  beta1_black[a] ~ dnorm(0, 0.001)
  beta2_black[a] ~ dnorm(0, 0.001)
	
  for(y in 35:Y){ #guided SWHS harvest likelihood
   tauHhat_ayg[a, y] <- 1 / log(cvHhat_ayg[a, y] * cvHhat_ayg[a, y] + 1)
   Hhat_ayg[a, y] ~ dlnorm(logHhat_ay[a, y] + log(pG_H[a, y]), tauHhat_ayg[a, y])
  }

  for(y in 35:Y){ #guided SWHS catch likelihood
   tauChat_ayg[a, y] <- 1 / log(cvChat_ayg[a, y] * cvChat_ayg[a, y] + 1)
   Chat_ayg[a, y] ~ dlnorm(logChat_ay[a, y] + log(pG_C[a, y]), tauChat_ayg[a, y])
  }

  for(y in 22:Y){ #logbook likelihood; guided brf catch and harvest by area and year
   Hlb_ayg[a, y] ~ dpois(H_ayg[a, y])   # all rockfish
   Hlbp_ayg[a, y] ~ dpois(H_ayg[a, y] * p_pelagic[a, y, 1]) #pelagic rockfish
  } 

### Can't fit to release data because Releases being calculated internally in the model! 
###  for (y in 23:Y) {
###    Rlb_ayg[a, y] ~ dpois(R_ayg[a, y])   # all rockfish alt: dpois(C_ayg[a, y] - H_ayg[a, y])
###    Rlbp_ayg[a, y] ~ dpois((R_ayg[a, y]) * p_pelagic[a, y, 1]) #pelagic rockfish; 
###  }
  
  for(y in 30:Y){ #logbook likelihood; guided yelloweye harvest by area and year
   Hlby_ayg[a, y] ~ dpois(Hy_ayg[a, y])
###   Rlby_ayg[a, y] ~ dpois(Ry_ayg[a, y]) #alt: dpois(Cy_ayg[a, y] - Hy_ayg[a, y])
  }
	
  for(y in 1:Y){
   #Harvest
   H_ayg[a, y] <- H_ay[a, y] * pG_H[a, y]           # guided harvests
   H_ayu[a, y] <- H_ay[a, y] * (1 - pG_H[a, y])     # unguide harvests
   H_ay[a, y] <- exp(logH_ay[a, y])               # total harvest parameter

   #Catches
   C_ayg[a, y] <- C_ay[a, y] * pG_C[a, y]           # guided catches
   C_ayu[a, y] <- C_ay[a, y] * (1 - pG_C[a, y])     # unguide catches
   C_ay[a, y] <- exp(logC_ay[a, y])               # total catch parameter

   #Total releases
   R_ayg[a, y] <- R_ay[a, y] * pG_C[a, y] # max(C_ayg[a, y] - H_ayg[a, y], 0)           # guided releases
   R_ayu[a, y] <- R_ay[a, y] * (1 - pG_C[a, y]) #max(C_ayu[a, y] -  H_ayu[a, y], 0)    # unguide releases
   R_ay[a, y] <- max(C_ay[a, y] - H_ay[a, y], 0)               # total catch releases

   #Black rockfish
   Hb_ayg[a, y] <- H_ayg[a, y] * p_pelagic[a, y, 1] * p_black[a, y, 1]
   Hb_ayu[a, y] <- H_ayu[a, y] * p_pelagic[a, y, 2] * p_black[a, y, 2]
   Hb_ay[a, y] <- Hb_ayg[a, y] + Hb_ayu[a, y]

   Cb_ayg[a, y] <- C_ayg[a, y] * p_pelagic[a, y, 1] * p_black[a, y, 1]
   Cb_ayu[a, y] <- C_ayu[a, y] * p_pelagic[a, y, 2] * p_black[a, y, 2]
   Cb_ay[a, y] <- Cb_ayg[a, y] + Cb_ayu[a, y]

   Rb_ayg[a, y] <- R_ayg[a, y] * p_pelagic[a, y, 1] * p_black[a, y, 1] #Cb_ayg[a, y] - Hb_ayg[a, y]
   Rb_ayu[a, y] <- R_ayu[a, y] * p_pelagic[a, y, 2] * p_black[a, y, 2]
   Rb_ay[a, y] <- Rb_ayg[a, y] + Rb_ayu[a, y]

   #Yelloweye rockfish
   Hy_ayg[a, y] <- H_ayg[a, y] * (1 - p_pelagic[a, y, 1]) * p_yellow[a, y, 1]
   Hy_ayu[a, y] <- H_ayu[a, y] * (1 - p_pelagic[a, y, 2]) * p_yellow[a, y, 2]
   Hy_ay[a, y] <- Hy_ayg[a, y] + Hy_ayu[a, y]

   Cy_ayg[a, y] <- C_ayg[a, y] * (1 - p_pelagic[a, y, 1]) * p_yellow[a, y, 1]
   Cy_ayu[a, y] <- C_ayu[a, y] * (1 - p_pelagic[a, y, 2]) * p_yellow[a, y, 2]
   Cy_ay[a, y] <- Cy_ayg[a, y] + Cy_ayu[a, y]

   Ry_ayg[a, y] <- R_ayg[a, y] * (1 - p_pelagic[a, y, 1]) * p_yellow[a, y, 1]
   Ry_ayu[a, y] <- R_ayu[a, y] * (1 - p_pelagic[a, y, 2]) * p_yellow[a, y, 2]
   Ry_ay[a, y] <- Ry_ayg[a, y] + Ry_ayu[a, y]
   
   #SWHS Bias and user comp
   logbc[a, y] ~ dnorm(mu_bc[a], tau_bc[a])     # mean log bias in SWHS H estimates
   pG_H[a, y] ~ dbeta(b1_pG_H[a], b2_pG_H[a])         # P(user)ay1 = frac of harv taken by charter anglers
   pG_C[a, y] ~ dbeta(b1_pG_C[a], b2_pG_C[a]) 
   
   #SWHS total likelihood	
   tauHhat_ay[a, y] <- 1 / log(cvHhat_ay[a, y] * cvHhat_ay[a, y] + 1)
   Hhat_ay[a, y] ~ dlnorm(logHhat_ay[a, y], tauHhat_ay[a, y])
   logHhat_ay[a, y] <- logH_ay[a, y] + logbc[a, y]
   logH_ay[a, y] ~ dnorm(Htrend_ay[a, y], prec_H[a])
   Htrend_ay[a, y] <- Z[y, ] %*% beta_H[a, 1:C]   # Harvest temproal trend defined by penalized spline 

   # Chat tau for all years: 
   tauChat_ay[a, y] <- 1 / log(cvChat_ay[a, y] * cvChat_ay[a, y] + 1)
   } #END EVERY YEAR

  for (y in 1:42){ #Prior to regulation changes in 2019, C is fit based on proportion harvested
    #Proportion harvested calculated through 2018 before regulations started changing
    logit(pH[a, y]) <- pH_int[a] + pH_slo[a] * y   
    Chat_ay_pH[a, y] ~ dlnorm(log(Hhat_ay[a, y]) - log(pH[a, y]), tauChat_ay[a, y])
  }

  for (y in 1:13){ # fit Chat prior to 1990 to retention probability regression
    logC_ay[a,y] <- log(Hhat_ay[a, y]) - log(pH[a, y])
    logChat_ay[a, y] <- log(Hhat_ay[a, y]) - log(pH[a, y]) ## bias correction already in Hhat_ay 
  }

  for (y in 14:Y){ #Fit C is fit to data starting in 1990 when SWHS started tracking this
    Chat_ay_obs[a, y] ~ dlnorm(logChat_ay[a, y], tauChat_ay[a, y])
    logChat_ay[a, y] <- logC_ay[a, y] + logbc[a, y]
    logC_ay[a, y] ~ dnorm(Ctrend_ay[a, y], prec_C[a])
    Ctrend_ay[a, y] <- Z[y, ] %*% beta_C[a, 1:C]
  }
   
  for (y in 1:Y) {
   #Composition logistic regression
   for(u in 1:2){
    logit(p_pelagic[a, y, u]) <- beta0_pelagic[a] + beta1_pelagic[a] * y + beta2_pelagic[a] * (u - 1) + re_pelagic[a, y, u]

    logit(p_yellow[a, y, u]) <- beta0_yellow[a] + beta1_yellow[a] * y + beta2_yellow[a] * (u - 1) + re_yellow[a, y, u] + beta3_yellow[a] * pow(y, 2)
    ## Other yellow option: logit(p_yellow[a, y, u]) <- beta0_yellow[a] + (beta1_yellow[a] * y) / (1 + beta2_yellow[a] * y) + re_yellow[a, y, u]

    logit(p_black[a, y, u]) <- beta0_black[a] + beta1_black[a] * y + beta2_black[a] * (u - 1) + re_black[a, y, u]

    re_black[a, y, u] ~ dnorm(0, tau_comp)    # random effects
    re_pelagic[a, y, u] ~ dnorm(0, tau_comp)
    re_yellow[a, y, u] ~ dnorm(0, tau_comp)
   }
  }
 
 #Spline parameters
 prec_H[a] <- pow(sigma_H[a], -2)
 sigma_H[a] <- 0.25 #~ dunif(0, 10) 
 beta_H[a, 1:C] ~ dmnorm(zero[1:C] + beta0_H[a], lambda_H[a] * Q[1:C, 1:C])
 gamma_H[a, 1:C] <- beta_H[a, 1:C] - beta0_H[a]
 lambda_H[a] ~ dgamma(0.001, 0.001)
 beta0_H[a] ~ dnorm(0, 1e-6)

 prec_C[a] <- pow(sigma_C[a], -2)
 sigma_C[a] <- 0.25 #~ dunif(0, 10) 
 beta_C[a, 1:C] ~ dmnorm(zero[1:C] + beta0_C[a], lambda_C[a] * Q[1:C, 1:C])
 gamma_C[a, 1:C] <- beta_C[a, 1:C] - beta0_C[a]
 lambda_C[a] ~ dgamma(0.001, 0.001)
 beta0_C[a] ~ dnorm(0, 1e-6)
 }
}